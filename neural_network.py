# -*- coding: utf-8 -*-
"""Neural Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SSGpa4jE3b8L2DGvw5iXhlnQAwDF2wRe
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
print(x_train.shape)
print(y_train.shape)

#  reshape the data to flatten it
x_train = x_train.reshape(-1, 28*28).astype("float32") / 255.0
x_test = x_test.reshape(-1, 28*28).astype("float32") / 255.0

#  sequential API
model = keras.Sequential(
    [
        keras.Input(shape=(28*28)),
        layers.Dense(512, activation='relu'),
        layers.Dense(256, activation='relu'),
        layers.Dense(10),
    ]
)

# Print the summary of the model training
print(model.summary())

# using the functional api
inputs = keras.Input(784)
x = layers.Dense(512, activation="relu", name="first_layer")(inputs)
x = layers.Dense(256, activation="relu", name="second_layer")(x)
output = layers.Dense(10, activation="softmax")(x)
model = keras.Model(inputs=inputs, outputs=output)
print(model.summary())


#
model.compile(
    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer=keras.optimizers.Adam(lr=0.001),
    metrics=['accuracy'],
)

# model training using the data
model.fit(x_train, y_train, batch_size=32, epochs=5, verbose=2)

# Evaluate the model accuracy
model.evaluate(x_test, y_test, batch_size=32, verbose=2)

